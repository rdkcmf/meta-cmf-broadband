Source: Mateusz Bajorski <mbajorski@plume.com>
Subject: RDK extender updates

diff --git a/kconfig/Kconfig.platform b/kconfig/Kconfig.platform
index 332ba16..d5420c2 100644
--- a/kconfig/Kconfig.platform
+++ b/kconfig/Kconfig.platform
@@ -5,6 +5,16 @@ menuconfig PLATFORM_IS_RDK
 
 if PLATFORM_IS_RDK
 
+comment "RDK target not available! Please disable TARGET_MODEL_GET TARGET_SERIAL_FROM_MAC TARGET_LINUX_LOGPULL"
+    depends on TARGET_MODEL_GET || TARGET_SERIAL_FROM_MAC || TARGET_LINUX_LOGPULL
+
+config RDK_CONFIG_TARGET
+    bool "Use RDK target implementation"
+    depends on !TARGET_MODEL_GET && !TARGET_SERIAL_FROM_MAC && !TARGET_LINUX_LOGPULL
+    default y
+    help
+        Use RDK-based config target
+
 config RDK_LAN_BRIDGE_NAME
     string "LAN bridge name"
     default "br-home"
@@ -59,6 +69,15 @@ config RDK_MULTI_PSK_SUPPORT
         wifi_pushMultiPskKeys(),
         wifi_getMultiPskKeys()
 
+config RDK_DISABLE_SYNC
+    bool "RDK disable sync with MeshAgent"
+    default n
+
+config RDK_EXTENDER
+    bool "RDK Extender device"
+    depends on RDK_DISABLE_SYNC
+    default n
+
 menuconfig DEFAULT_OSYNC_HAL
     bool "OSync HAL defaults"
     help
diff --git a/src/lib/osn/override.mk b/src/lib/osn/override.mk
index 80fe7ae..a64fcd5 100644
--- a/src/lib/osn/override.mk
+++ b/src/lib/osn/override.mk
@@ -3,14 +3,16 @@
 # RDK unit override for OSN library
 #
 ##############################################################################
+ifneq ($(CONFIG_RDK_DISABLE_SYNC),y)
 UNIT_SRC := $(filter-out src/osn_dhcp_server_dnsmasq.c,$(UNIT_SRC))
 UNIT_SRC := $(filter-out src/linux/dnsmasq_server.c,$(UNIT_SRC))
 
 UNIT_SRC_DIR := $(OVERRIDE_DIR)/src
 UNIT_SRC_TOP += $(UNIT_SRC_DIR)/osn_dhcps.c
 
-UNIT_DEPS += $(PLATFORM_DIR)/src/lib/osync_hal
 UNIT_DEPS += src/lib/log
 UNIT_DEPS += src/lib/daemon
 UNIT_DEPS += src/lib/evx
 UNIT_DEPS += src/lib/ds
+endif
+UNIT_DEPS += $(PLATFORM_DIR)/src/lib/osync_hal
diff --git a/src/lib/osn/src/osn_dhcps.c b/src/lib/osn/src/osn_dhcps.c
index f1c34e1..f3500b2 100644
--- a/src/lib/osn/src/osn_dhcps.c
+++ b/src/lib/osn/src/osn_dhcps.c
@@ -251,7 +251,9 @@ static bool dhcp_server_init(osn_dhcp_server_t *self, const char *ifname)
         return false;
     }
 
+#ifndef CONFIG_RDK_DISABLE_SYNC
     sync_init(SYNC_MGR_NM, NULL);
+#endif
 
     /* Initialize this instance */
     memset(self, 0 ,sizeof(*self));
diff --git a/src/lib/target/inc/target_RDKB.h b/src/lib/target/inc/target_RDKB.h
index bbd3aa7..41346af 100644
--- a/src/lib/target/inc/target_RDKB.h
+++ b/src/lib/target/inc/target_RDKB.h
@@ -11,8 +11,6 @@
 
 #define TARGET_RUN_PATH             "/var/run/opensync"
 #define TARGET_BIN_PATH             "/usr/opensync/bin"
-#define TARGET_TOOLS_PATH           "/usr/opensync/tools"
-#define TARGET_SCRIPTS_PATH         "/usr/opensync/scripts"
 #define TARGET_CERT_PATH            "/usr/opensync/etc/certs"
 #define TARGET_MANAGERS_PID_PATH    TARGET_RUN_PATH
 #define TARGET_OVSDB_SOCK_PATH      "/var/run/openvswitch/db.sock"
@@ -21,8 +19,6 @@
 #define TARGET_LOGREAD_FILENAME     "/var/log/messages"
 #endif
 
-#define TARGET_PERSISTENT_STORAGE   "/nvram"
-
 /******************************************************************************
  *  MANAGERS definitions
  *****************************************************************************/
diff --git a/src/lib/target/inc/target_internal.h b/src/lib/target/inc/target_internal.h
index d57e1ce..03c6848 100644
--- a/src/lib/target/inc/target_internal.h
+++ b/src/lib/target/inc/target_internal.h
@@ -9,7 +9,9 @@
 #include "osync_hal.h"
 #include "osn_dhcp.h"
 
+#ifndef CONFIG_RDK_DISABLE_SYNC
 #include <mesh/meshsync_msgs.h>  // needed only by sync_send_security_change()
+#endif
 
 #ifndef __WIFI_HAL_H__
 #include "ccsp/wifi_hal.h"
@@ -162,8 +164,10 @@ void                 sync_init(sync_mgr_t mgr,
 bool                 sync_cleanup(void);
 bool                 sync_send_ssid_change(INT ssid_index, const char *ssid_ifname,
                                     const char *new_ssid);
+#ifndef CONFIG_RDK_DISABLE_SYNC
 bool                 sync_send_security_change(INT ssid_index, const char *ssid_ifname,
                                     MeshWifiAPSecurity *sec);
+#endif
 bool                 sync_send_status(radio_cloud_mode_t mode);
 bool                 sync_send_channel_change(INT radio_index, UINT channel);
 bool                 sync_send_ssid_broadcast_change(INT ssid_index, BOOL ssid_broadcast);
@@ -171,6 +175,7 @@ bool                 sync_send_channel_bw_change(INT ssid_index, UINT bandwidth)
 
 bool                 vif_state_update(INT ssidIndex);
 bool                 vif_state_get(INT ssidIndex, struct schema_Wifi_VIF_State *vstate);
+bool                 vif_state_sta_get(INT ssidIndex, struct schema_Wifi_VIF_State *vstate);
 bool                 vif_copy_to_config(INT ssidIndex, struct schema_Wifi_VIF_State *vstate,
                                         struct schema_Wifi_VIF_Config *vconf);
 bool                 vif_external_ssid_update(const char *ssid, int ssid_index);
@@ -181,6 +186,8 @@ struct               target_radio_ops;
 bool                 clients_hal_init(const struct target_radio_ops *rops);
 bool                 clients_hal_fetch_existing(unsigned int apIndex);
 
+bool                 sta_hal_init();
+
 void                 cloud_config_mode_init(void);
 void                 cloud_config_set_mode(const char *device_mode);
 
diff --git a/src/lib/target/override.mk b/src/lib/target/override.mk
index a0e67c7..ac6a143 100644
--- a/src/lib/target/override.mk
+++ b/src/lib/target/override.mk
@@ -5,8 +5,9 @@
 ##############################################################################
 
 UNIT_SRC := $(TARGET_COMMON_SRC)
+ifneq ($(CONFIG_RDK_DISABLE_SYNC),y)
 UNIT_SRC := $(filter-out src/target_mac_learn.c,$(UNIT_SRC))
-UNIT_SRC := $(filter-out src/target_kconfig.c,$(UNIT_SRC))
+endif
 
 UNIT_SRC_DIR := $(OVERRIDE_DIR)/src
 
@@ -18,8 +19,10 @@ UNIT_SRC_TOP += $(UNIT_SRC_DIR)/radio.c
 UNIT_SRC_TOP += $(UNIT_SRC_DIR)/vif.c
 UNIT_SRC_TOP += $(UNIT_SRC_DIR)/stats.c
 UNIT_SRC_TOP += $(UNIT_SRC_DIR)/log.c
+ifneq ($(CONFIG_RDK_DISABLE_SYNC),y)
 UNIT_SRC_TOP += $(UNIT_SRC_DIR)/sync.c
 UNIT_SRC_TOP += $(UNIT_SRC_DIR)/maclearn.c
+endif
 UNIT_SRC_TOP += $(UNIT_SRC_DIR)/bsal.c
 UNIT_SRC_TOP += $(UNIT_SRC_DIR)/cloud_config.c
 
diff --git a/src/lib/target/src/bsal.c b/src/lib/target/src/bsal.c
index 24217a5..b87b984 100644
--- a/src/lib/target/src/bsal.c
+++ b/src/lib/target/src/bsal.c
@@ -932,14 +932,14 @@ static bool bsal_client_set_connected(
         {
             LOGI("BSAL Client is "MAC_ADDR_FMT" is associated with iface: %d", MAC_ADDR_UNPACK(mac_addr), apIndex);
             info->connected = true;
-            info->snr = clients[i].cli_RSSI;
+            info->snr = clients[i].cli_SNR;
             info->tx_bytes = clients[i].cli_BytesSent;
             info->rx_bytes = clients[i].cli_BytesReceived;
 #ifndef CONFIG_RDK_HAS_ASSOC_REQ_IES
             if (client_info_cache != NULL)
             {
                 client_info_cache->client.connected = true;
-                client_info_cache->client.snr = clients[i].cli_RSSI;
+                client_info_cache->client.snr = clients[i].cli_SNR;
                 client_info_cache->client.rx_bytes = clients[i].cli_BytesReceived;
                 client_info_cache->client.tx_bytes = clients[i].cli_BytesSent;
                 memcpy(info, &client_info_cache->client, sizeof(*info));
diff --git a/src/lib/target/src/entity.c b/src/lib/target/src/entity.c
index 9e6dd69..8d7080a 100644
--- a/src/lib/target/src/entity.c
+++ b/src/lib/target/src/entity.c
@@ -98,12 +98,6 @@ bool target_id_get(void *buff, size_t buffsz)
     return true;
 }
 
-bool target_sku_get(void *buff, size_t buffsz)
-{
-    // SKU info not available
-    return false;
-}
-
 bool target_model_get(void *buff, size_t buffsz)
 {
     if (!target_entity_cache.model_cached)
@@ -126,12 +120,6 @@ bool target_sw_version_get(void *buff, size_t buffsz)
     return true;
 }
 
-bool target_hw_revision_get(void *buff, size_t buffsz)
-{
-    // HW version info not available
-    return false;
-}
-
 bool target_platform_version_get(void *buff, size_t buffsz)
 {
     if (!target_entity_cache.pver_cached)
diff --git a/src/lib/target/src/radio.c b/src/lib/target/src/radio.c
index 3e721cc..9a92027 100644
--- a/src/lib/target/src/radio.c
+++ b/src/lib/target/src/radio.c
@@ -69,7 +69,11 @@ static bool g_resync_ongoing = false;
 
 bool target_radio_config_need_reset()
 {
+#ifdef CONFIG_RDK_EXTENDER
+    return false;
+#else
     return true;
+#endif
 }
 
 static void healthcheck_task(void *arg)
@@ -88,6 +92,12 @@ bool target_radio_init(const struct target_radio_ops *ops)
     {
         LOGW("Cannot initialize clients");
     }
+#ifdef CONFIG_RDK_EXTENDER
+    if (!sta_hal_init())
+    {
+        LOGW("Cannot initialize clients");
+    }
+#endif
 
     evsched_task(&healthcheck_task, NULL, EVSCHED_SEC(2));
     return true;
@@ -137,6 +147,7 @@ static bool radio_change_channel(
         return false;
     }
 
+#ifndef CONFIG_RDK_DISABLE_SYNC
     if (!sync_send_channel_change(radioIndex, channel))
     {
         LOGW("%d: Failed to sync channel change to %u", radioIndex, channel);
@@ -146,6 +157,7 @@ static bool radio_change_channel(
     {
         LOGW("%d: Failed to sync channel bandwidth change to %u MHz", radioIndex, ch_width);
     }
+#endif
 
     LOGI("%s: Started CSA to channel %d, width %d, tbtt %d",
          radio_ifname, channel, ch_width, CSA_TBTT);
@@ -479,7 +491,6 @@ static bool radio_copy_config_from_state(
         struct schema_Wifi_Radio_Config *rconf)
 {
     memset(rconf, 0, sizeof(*rconf));
-    schema_Wifi_Radio_Config_mark_all_present(rconf);
     rconf->_partial_update = true;
     rconf->vif_configs_present = false;
 
@@ -491,8 +502,11 @@ static bool radio_copy_config_from_state(
     LOGT("rconf->hw_type = %s", rconf->hw_type);
     SCHEMA_SET_INT(rconf->enabled, rstate->enabled);
     LOGT("rconf->enabled = %d", rconf->enabled);
-    SCHEMA_SET_INT(rconf->channel, rstate->channel);
-    LOGT("rconf->channel = %d", rconf->channel);
+    if (rstate->channel)
+    {
+        SCHEMA_SET_INT(rconf->channel, rstate->channel);
+        LOGT("rconf->channel = %d", rconf->channel);
+    }
     SCHEMA_SET_INT(rconf->tx_power, rstate->tx_power);
     LOGT("rconf->tx_power = %d", rconf->tx_power);
     SCHEMA_SET_STR(rconf->country, rstate->country);
@@ -793,5 +807,9 @@ radio_cloud_mode_set(radio_cloud_mode_t mode)
 {
     radio_cloud_mode = mode;
 
+#ifdef CONFIG_RDK_DISABLE_SYNC
+    return true;
+#else
     return sync_send_status(radio_cloud_mode);
+#endif
 }
diff --git a/src/lib/target/src/target.c b/src/lib/target/src/target.c
index 74a8eae..fda6d39 100644
--- a/src/lib/target/src/target.c
+++ b/src/lib/target/src/target.c
@@ -101,11 +101,15 @@ bool target_init(target_init_opt_t opt, struct ev_loop *loop)
                 return -1;
             }
 
+            #ifndef CONFIG_RDK_DISABLE_SYNC
             sync_init(SYNC_MGR_WM, NULL);
+            #endif
             break;
 
         case TARGET_INIT_MGR_CM:
+            #ifndef CONFIG_RDK_DISABLE_SYNC
             sync_init(SYNC_MGR_CM, cloud_config_mode_init);
+            #endif
             break;
 
         case TARGET_INIT_MGR_BM:
@@ -128,7 +132,9 @@ bool target_close(target_init_opt_t opt, struct ev_loop *loop)
     switch (opt)
     {
         case TARGET_INIT_MGR_WM:
+            #ifndef CONFIG_RDK_DISABLE_SYNC
             sync_cleanup();
+            #endif
             /* fall through */
 
         case TARGET_INIT_MGR_SM:
@@ -143,26 +149,6 @@ bool target_close(target_init_opt_t opt, struct ev_loop *loop)
     return true;
 }
 
-const char* target_persistent_storage_dir(void)
-{
-    return TARGET_PERSISTENT_STORAGE;
-}
-
-const char* target_scripts_dir(void)
-{
-    return TARGET_SCRIPTS_PATH;
-}
-
-const char* target_tools_dir(void)
-{
-    return TARGET_TOOLS_PATH;
-}
-
-const char* target_bin_dir(void)
-{
-    return TARGET_BIN_PATH;
-}
-
 const char* target_speedtest_dir(void)
 {
     return target_tools_dir();
diff --git a/src/lib/target/src/vif.c b/src/lib/target/src/vif.c
index 56de958..b2d6c27 100644
--- a/src/lib/target/src/vif.c
+++ b/src/lib/target/src/vif.c
@@ -17,24 +17,6 @@
 #define MODULE_ID LOG_MODULE_ID_VIF
 #define MAX_MULTI_PSK_KEYS 30
 
-typedef enum
-{
-    HW_MODE_11B         = 0,
-    HW_MODE_11G,
-    HW_MODE_11A,
-    HW_MODE_11N,
-    HW_MODE_11AC
-} hw_mode_t;
-
-static c_item_t map_hw_mode[] =
-{
-    C_ITEM_STR(HW_MODE_11B,             "11b"),
-    C_ITEM_STR(HW_MODE_11G,             "11g"),
-    C_ITEM_STR(HW_MODE_11A,             "11a"),
-    C_ITEM_STR(HW_MODE_11N,             "11n"),
-    C_ITEM_STR(HW_MODE_11AC,            "11ac")
-};
-
 static c_item_t map_enable_disable[] =
 {
     C_ITEM_STR(true,                    "enabled"),
@@ -526,6 +508,20 @@ static bool security_to_state(
     return true;
 }
 
+#ifdef CONFIG_RDK_DISABLE_SYNC
+#define MAX_MODE_LEN         25
+#define MAX_PASS_LEN         65
+/**
+ * Mesh Sync Wifi configuration change message
+ */
+typedef struct _MeshWifiAPSecurity {
+    uint32_t  index;                    // AP index [0-15]
+    char      passphrase[MAX_PASS_LEN]; // AP Passphrase
+    char      secMode[MAX_MODE_LEN];    // Security mode
+    char      encryptMode[MAX_MODE_LEN];    // Encryption mode
+} MeshWifiAPSecurity;
+#endif
+
 static bool security_to_syncmsg(
         const struct schema_Wifi_VIF_Config *vconf,
         MeshWifiAPSecurity *dest)
@@ -800,7 +796,6 @@ bool vif_copy_to_config(
     int i;
 
     memset(vconf, 0, sizeof(*vconf));
-    schema_Wifi_VIF_Config_mark_all_present(vconf);
     vconf->_partial_update = true;
 
     SCHEMA_SET_STR(vconf->if_name, vstate->if_name);
@@ -827,8 +822,6 @@ bool vif_copy_to_config(
     LOGT("vconf->vif_radio_idx = %d", vconf->vif_radio_idx);
     SCHEMA_SET_STR(vconf->ssid_broadcast, vstate->ssid_broadcast);
     LOGT("vconf->ssid_broadcast = %s", vconf->ssid_broadcast);
-    SCHEMA_SET_STR(vconf->min_hw_mode, vstate->min_hw_mode);
-    LOGT("vconf->min_hw_mode = %s", vconf->min_hw_mode);
     SCHEMA_SET_STR(vconf->ssid, vstate->ssid);
     LOGT("vconf->ssid = %s", vconf->ssid);
     SCHEMA_SET_INT(vconf->rrm, vstate->rrm);
@@ -885,6 +878,189 @@ static bool vif_get_radio_ifname(
     return true;
 }
 
+#ifdef CONFIG_RDK_EXTENDER
+/* CLIENT-API */
+bool vif_state_sta_get(INT ssidIndex, struct schema_Wifi_VIF_State *vstate)
+{
+    CHAR                            buf[WIFIHAL_MAX_BUFFER];
+    INT                             ret;
+    char                            ssid_ifname[128];
+    INT                             radio_idx;
+    ULONG                           lval;
+    BOOL                            enabled;
+
+    memset(vstate, 0, sizeof(*vstate));
+    schema_Wifi_VIF_State_mark_all_present(vstate);
+    vstate->_partial_update = true;
+    vstate->associated_clients_present = false;
+    vstate->vif_config_present = false;
+    memset(ssid_ifname, 0, sizeof(ssid_ifname));
+
+    ret = wifi_getSTAName(ssidIndex, ssid_ifname);
+    if (ret != RETURN_OK)
+    {
+        LOGE("%s: cannot get sta name for index %d", __func__, ssidIndex);
+        return false;
+    }
+
+    SCHEMA_SET_STR(vstate->if_name, target_unmap_ifname(ssid_ifname));
+
+    SCHEMA_SET_STR(vstate->mode, "sta");
+    ret = wifi_getSTAEnabled(ssidIndex, &enabled);
+    if (ret != RETURN_OK)
+    {
+        LOGW("%s: Failed to get STA (enabled)", ssid_ifname);
+    }
+    else
+    {
+        SCHEMA_SET_INT(vstate->enabled, enabled);
+    }
+
+    SCHEMA_SET_INT(vstate->vif_radio_idx, 0);
+
+    // mac (w/ exists)
+    memset(buf, 0, sizeof(buf));
+    ret = wifi_getSTAMAC(ssidIndex, buf);
+    if (ret != RETURN_OK)
+    {
+        LOGW("%s: Failed to get STA (mac)", ssid_ifname);
+    }
+    else
+    {
+        SCHEMA_SET_STR(vstate->mac, buf);
+    }
+
+    // mac (w/ exists)
+    memset(buf, 0, sizeof(buf));
+    ret = wifi_getSTABSSID(ssidIndex, buf);
+    if (ret != RETURN_OK)
+    {
+        LOGW("%s: Failed to get STA (parent)", ssid_ifname);
+    }
+    else
+    {
+        SCHEMA_SET_STR(vstate->parent, buf);
+    }
+
+    ret = wifi_getSSIDRadioIndex(ssidIndex, &radio_idx);
+    if (ret != RETURN_OK)
+    {
+        LOGE("%s: cannot get radio idx for SSID %s\n", __func__, ssid_ifname);
+        return false;
+    }
+
+    // channel (w/ exists)
+    ret = wifi_getRadioChannel(radio_idx, &lval);
+    if (ret != RETURN_OK)
+    {
+        LOGI("%s: Failed to get channel from radio idx %d", ssid_ifname, radio_idx);
+    }
+    else
+    {
+        SCHEMA_SET_INT(vstate->channel, lval);
+    }
+
+    //SSID
+    memset(buf, 0, sizeof(buf));
+    ret = wifi_getSTASSID(ssidIndex, buf);
+    if (ret != RETURN_OK)
+    {
+        LOGW("%s: failed to get STA SSID", ssid_ifname);
+    }
+    else
+    {
+        SCHEMA_SET_STR(vstate->ssid, buf);
+    }
+    //credentials
+    if (strlen(vstate->ssid))
+    {
+        BOOL out_scan_cur_freq;
+        int out_array_size = 30;
+        wifi_sta_network_t * out_staNetworks_array = (wifi_sta_network_t *) calloc(out_array_size, sizeof(wifi_sta_network_t));
+        ret = wifi_getSTANetworks(ssidIndex, &out_staNetworks_array, out_array_size, &out_scan_cur_freq);
+        if (ret != RETURN_OK)
+        {
+            LOGW("%s: Failed to get STA (credentials)", ssid_ifname);
+        }
+        else
+        {
+            wifi_sta_network_t * staNetwork = out_staNetworks_array;
+            for (int i=0; i < out_array_size; i++, staNetwork++)
+                if(!strncmp(vstate->ssid,staNetwork->ssid,strlen(vstate->ssid)+1))
+                {
+                    SCHEMA_KEY_VAL_APPEND(vstate->security, "encryption", "WPA-PSK");
+                    SCHEMA_KEY_VAL_APPEND(vstate->security, "key", staNetwork->psk);
+                    if (!strcmp(staNetwork->proto, "WPA RSN"))
+                        SCHEMA_KEY_VAL_APPEND(vstate->security, "mode", "mixed");
+                    else if (!strcmp(staNetwork->proto, "RSN"))
+                        SCHEMA_KEY_VAL_APPEND(vstate->security, "mode", "2");
+                    else if (!strcmp(staNetwork->proto, "WPA"))
+                        SCHEMA_KEY_VAL_APPEND(vstate->security, "mode", "1");
+                    else
+                         LOGW("%s: Failed to get network mode %s (%s)\n", ssid_ifname, vstate->ssid, staNetwork->proto);
+                }
+        }
+
+        free(out_staNetworks_array);
+    }
+
+    SCHEMA_SET_INT(vstate->wds, 0);
+
+    return true;
+}
+
+static INT vif_sta_update_cb(INT apIndex, wifi_client_associated_dev_t *state)
+{
+    struct schema_Wifi_VIF_State    vstate;
+    char radio_ifname[128];
+    char ssid_ifname[128];
+    int ret = 0;
+    memset(ssid_ifname, 0, sizeof(ssid_ifname));
+
+    ret = wifi_getSTAName(apIndex, ssid_ifname);
+    if (ret != RETURN_OK)
+    {
+        LOGE("%s: cannot get sta name for index %d", __func__, apIndex);
+        return false;
+    }
+
+    LOGN("%s: Received event connected: %s address: %02x:%02x:%02x:%02x:%02x:%02x reason: %d locally_generated: %d",
+          ssid_ifname, state->connected ? "true": "false",
+          state->MACAddress[0],
+          state->MACAddress[1],
+          state->MACAddress[2],
+          state->MACAddress[3],
+          state->MACAddress[4],
+          state->MACAddress[5],
+          state->reason,
+          state->locally_generated
+    );
+
+    if (!vif_state_sta_get(apIndex, &vstate))
+    {
+        LOGE("%s: cannot get vif state for STA index %d", __func__, apIndex);
+        return 0;
+    }
+    if (!vif_get_radio_ifname(apIndex, radio_ifname, sizeof(radio_ifname)))
+    {
+        LOGE("%s: cannot get radio ifname for SSID index %d", __func__, apIndex);
+        return 0;
+    }
+
+    LOGN("Updating VIF state for SSID index %d", apIndex);
+    return radio_rops_vstate(&vstate, radio_ifname);
+
+}
+
+bool sta_hal_init(const struct target_radio_ops *rops)
+{
+    // Register callbacks (NOTE: calls callback from created pthread)
+    wifi_client_event_callback_register(vif_sta_update_cb);
+
+    return true;
+}
+#endif
+
 bool vif_state_get(
         INT ssidIndex,
         struct schema_Wifi_VIF_State *vstate)
@@ -892,13 +1068,11 @@ bool vif_state_get(
     ULONG                           lval;
     CHAR                            buf[WIFIHAL_MAX_BUFFER];
     CHAR                            tmp[WIFIHAL_MAX_BUFFER];
-    BOOL                            bval, gOnly, nOnly, acOnly;
-    hw_mode_t                       min_hw_mode;
+    BOOL                            bval;
     char                            *str;
     INT                             ret;
     INT                             radio_idx;
     char                            ssid_ifname[128];
-    char                            band[128];
     BOOL                            rrm;
     BOOL                            btm;
 
@@ -957,7 +1131,16 @@ bool vif_state_get(
     }
 
     // vif_radio_idx (w/ exists)
+#ifdef CONFIG_RDK_EXTENDER
+    if (ssidIndex > 3)
+        SCHEMA_SET_INT(vstate->vif_radio_idx, 3);
+    else if (ssidIndex > 1)
+        SCHEMA_SET_INT(vstate->vif_radio_idx, 1);
+    else
+        SCHEMA_SET_INT(vstate->vif_radio_idx, 2);
+#else
     SCHEMA_SET_INT(vstate->vif_radio_idx, target_map_ifname_to_vif_radio_idx(vstate->if_name));
+#endif
 
     // ssid_broadcast (w/ exists)
     ret = wifi_getApSsidAdvertisementEnable(ssidIndex, &bval);
@@ -1010,54 +1193,6 @@ bool vif_state_get(
         return false;
     }
 
-    memset(band, 0, sizeof(band));
-    ret = wifi_getRadioOperatingFrequencyBand(radio_idx, band);
-    if (ret != RETURN_OK)
-    {
-        LOGE("%s: cannot get radio band for idx %d", __func__, radio_idx);
-        return false;
-    }
-
-    // min_hw_mode (w/ exists)
-    if (band[0] == '5')
-    {
-        min_hw_mode = HW_MODE_11A;
-    } else
-    {
-        min_hw_mode = HW_MODE_11B;
-    }
-    ret = wifi_getRadioStandard(radio_idx, buf, &gOnly, &nOnly, &acOnly);
-    if (ret != RETURN_OK)
-    {
-        LOGW("%s: Failed to get min_hw_mode from %d", ssid_ifname, radio_idx);
-    }
-    else
-    {
-        if (gOnly)
-        {
-            min_hw_mode = HW_MODE_11G;
-        }
-        else if (nOnly)
-        {
-            min_hw_mode = HW_MODE_11N;
-        }
-        else if (acOnly)
-        {
-            min_hw_mode = HW_MODE_11AC;
-        }
-    }
-
-    str = c_get_str_by_key(map_hw_mode, min_hw_mode);
-    if (strlen(str) == 0)
-    {
-        LOGW("%s: failed to encode min_hw_mode (%d)",
-             ssid_ifname, min_hw_mode);
-    }
-    else
-    {
-        SCHEMA_SET_STR(vstate->min_hw_mode, str);
-    }
-
     // SSID (w/ exists)
     memset(buf, 0, sizeof(buf));
     ret = wifi_getSSIDNameStatus(ssidIndex, buf);
@@ -1083,10 +1218,10 @@ bool vif_state_get(
     }
 
     // channel (w/ exists)
-    ret = wifi_getRadioChannel(radio_idx, &lval);
+    ret = wifi_getApChannel(ssidIndex, &lval);
     if (ret != RETURN_OK)
     {
-        LOGW("%s: Failed to get channel from radio idx %d", ssid_ifname, radio_idx);
+        LOGW("%s: Failed to get channel from AP idx %d", ssid_ifname,ssidIndex);
     }
     else
     {
@@ -1116,7 +1251,7 @@ bool vif_state_get(
     return true;
 }
 
-static bool vif_ifname_to_idx(const char *ifname, INT *outSsidIndex)
+static bool vif_ifname_to_idx(const char *ifname, INT *outSsidIndex, bool mode_sta)
 {
     INT ret;
     ULONG s, snum;
@@ -1133,7 +1268,19 @@ static bool vif_ifname_to_idx(const char *ifname, INT *outSsidIndex)
     for (s = 0; s < snum; s++)
     {
         memset(ssid_ifname, 0, sizeof(ssid_ifname));
+#ifdef CONFIG_RDK_EXTENDER
+        if(mode_sta)
+        {
+            ret = wifi_getSTAName(s, ssid_ifname);
+        }
+        else
+        {
+            ret = wifi_getApName(s, ssid_ifname);
+        }
+#else
         ret = wifi_getApName(s, ssid_ifname);
+#endif
+
         if (ret != RETURN_OK)
         {
             LOGE("%s: cannot get ap name for index %ld", __func__, s);
@@ -1149,7 +1296,7 @@ static bool vif_ifname_to_idx(const char *ifname, INT *outSsidIndex)
 
     if (ssid_index == -1)
     {
-        LOGE("%s: cannot find SSID index for %s", __func__, ifname);
+        LOGE("%s: %s cannot find SSID index for %s", __func__, mode_sta ? "STA": "AP", ifname);
         return false;
     }
 
@@ -1157,6 +1304,126 @@ static bool vif_ifname_to_idx(const char *ifname, INT *outSsidIndex)
     return true;
 }
 
+#ifdef CONFIG_RDK_EXTENDER
+bool sta_vif_config_set2(
+        const struct schema_Wifi_VIF_Config *vconf,
+        const struct schema_Wifi_Radio_Config *rconf,
+        const struct schema_Wifi_Credential_Config *cconfs,
+        const struct schema_Wifi_VIF_Config_flags *changed,
+        int num_cconfs)
+{
+    INT ssid_index;
+    INT ret;
+    const char *ssid_ifname = target_map_ifname((char *)vconf->if_name);
+    struct schema_Wifi_VIF_State vstate;
+    char radio_ifname[128];
+
+    if (!vif_ifname_to_idx(ssid_ifname, &ssid_index,true))
+    {
+        LOGE("%s: STA cannot get index for %s", __func__, ssid_ifname);
+        return false;
+    }
+
+    if (changed->enabled)
+    {
+        wifi_setSTAEnabled(ssid_index, vconf->enabled);
+    }
+
+    if (changed->ssid || changed->security || changed->parent)
+    {
+        if (!strlen(vconf->ssid))
+        {
+            //load Wifi_Credential_Config
+            wifi_sta_network_t * staNetworks = (wifi_sta_network_t *) calloc(num_cconfs,sizeof(wifi_sta_network_t));
+            wifi_sta_network_t * sta = staNetworks;
+            for (int i=0; i < num_cconfs; i++, cconfs++, sta++)
+            {
+                sprintf(sta->pairwise, "CCMP");
+                sprintf(sta->proto, "RSN");
+                sprintf(sta->key_mgmt, SCHEMA_KEY_VAL(cconfs->security, "encryption"));
+                sprintf(sta->psk, SCHEMA_KEY_VAL(cconfs->security, "key"));
+                sprintf(sta->ssid, cconfs->ssid);
+            }
+
+            ret = wifi_setSTANetworks(ssid_index,&staNetworks,num_cconfs,false);
+            if (ret != RETURN_OK)
+            {
+                LOGW("%s: Failed to set SSID credentials", ssid_ifname);
+            }
+
+            free(sta);
+        }
+        else
+        {
+            wifi_sta_network_t * sta = (wifi_sta_network_t *) calloc(1,sizeof(wifi_sta_network_t));
+            snprintf(sta->ssid, sizeof(sta->ssid) - 1, "%s", vconf->ssid);
+
+            if(strlen(vconf->parent))
+            {
+                printf("Seting parent to %s\n", vconf->parent);
+                sscanf(vconf->parent, "%02x:%02x:%02x:%02x:%02x:%02x",
+                       (unsigned int *)&sta->bssid[0],
+                       (unsigned int *)&sta->bssid[1],
+                       (unsigned int *)&sta->bssid[2],
+                       (unsigned int *)&sta->bssid[3],
+                       (unsigned int *)&sta->bssid[4],
+                       (unsigned int *)&sta->bssid[5]);
+            }
+            const char * mode = SCHEMA_KEY_VAL(vconf->security, "mode");
+            if (!strcmp(mode, "mixed"))
+            {
+                sprintf(sta->pairwise, "CCMP TKIP");
+                sprintf(sta->proto, "WPA RSN");
+
+            }
+            else if (!strcmp(mode, "2"))
+            {
+                sprintf(sta->pairwise, "CCMP");
+                sprintf(sta->proto, "RSN");
+            }
+            else if (!strcmp(mode, "1"))
+            {
+                sprintf(sta->pairwise, "TKIP");
+                sprintf(sta->proto, "WPA");
+            }
+            else
+            {
+                LOGI("%s: Failed to get mode. Setting mode WPA2", ssid_ifname);
+                sprintf(sta->pairwise, "CCMP");
+                sprintf(sta->proto, "RSN");
+            }
+            sprintf(sta->key_mgmt, SCHEMA_KEY_VAL(vconf->security, "encryption"));
+            sprintf(sta->psk, SCHEMA_KEY_VAL(vconf->security, "key"));
+
+            ret = wifi_setSTANetworks(ssid_index,&sta,1,false);
+            if (ret != RETURN_OK)
+            {
+                LOGW("%s: Failed to set SSID credentials", ssid_ifname);
+            }
+            free(sta);
+        }
+        LOGI("%s: Succesfully updated sta config", ssid_ifname);
+
+    }
+
+    if (!vif_state_sta_get(ssid_index, &vstate))
+    {
+        LOGE("%s: cannot update VIF state for SSID index %d", __func__, ssid_index);
+        return false;
+    }
+
+    if (!vif_get_radio_ifname(ssid_index, radio_ifname, sizeof(radio_ifname)))
+    {
+        LOGE("%s: cannot get radio ifname for SSID index %d", __func__, ssid_index);
+        return false;
+    }
+
+    LOGN("Updating VIF state for SSID index %d", ssid_index);
+    return radio_rops_vstate(&vstate, radio_ifname);
+
+}
+#endif
+
 bool target_vif_config_set2(
         const struct schema_Wifi_VIF_Config *vconf,
         const struct schema_Wifi_Radio_Config *rconf,
@@ -1172,12 +1439,30 @@ bool target_vif_config_set2(
     MeshWifiAPSecurity sec;
     const char *ssid_ifname = target_map_ifname((char *)vconf->if_name);
 
-    if (!vif_ifname_to_idx(ssid_ifname, &ssid_index))
+#ifdef CONFIG_RDK_EXTENDER
+    if(!strcmp(vconf->mode, "sta"))
+    {
+        return sta_vif_config_set2(vconf,rconf,cconfs,changed,num_cconfs);
+    }
+#endif
+
+    if (!vif_ifname_to_idx(ssid_ifname, &ssid_index,false))
     {
-        LOGE("%s: cannot get index for %s", __func__, ssid_ifname);
+        LOGE("%s: AP cannot get index for %s", __func__, ssid_ifname);
         return false;
     }
 
+    if (changed->enabled)
+    {
+        ret = wifi_setSSIDEnable(ssid_index, vconf->enabled);
+        LOGD("[WIFI_HAL SET] wifi_setSSIDEnable(%d, %d) = %d",
+                                 ssid_index, vconf->enabled, ret);
+        if (ret != RETURN_OK)
+        {
+            LOGW("%s: Failed to change enable to %d", ssid_ifname, vconf->enabled);
+        }
+    }
+
     if (!acl_apply(ssid_index, ssid_ifname, vconf))
     {
         LOGE("%s: cannot apply ACL for %s", __func__, ssid_ifname);
@@ -1198,11 +1483,13 @@ bool target_vif_config_set2(
             }
             else
             {
+                #ifndef CONFIG_RDK_DISABLE_SYNC
                 if (!sync_send_ssid_broadcast_change(ssid_index, bval))
                 {
                     LOGW("%s: Failed to sync SSID Broadcast change to %s",
                         ssid_ifname, (bval ? "true" : "false"));
                 }
+                #endif
             }
 
             LOGI("%s: Updated SSID Broadcast to %d", ssid_ifname, bval);
@@ -1244,10 +1531,12 @@ bool target_vif_config_set2(
         else
         {
             LOGI("%s: SSID updated to '%s'", ssid_ifname, tmp);
+#ifndef CONFIG_RDK_DISABLE_SYNC
             if (!sync_send_ssid_change(ssid_index, ssid_ifname, vconf->ssid))
             {
                 LOGE("%s: Failed to sync SSID change to '%s'", ssid_ifname, vconf->ssid);
             }
+#endif
         }
     }
 
@@ -1299,26 +1588,17 @@ bool target_vif_config_set2(
                     }
                 }
                 LOGI("%s: Security settings updated", ssid_ifname);
-
+#ifndef CONFIG_RDK_DISABLE_SYNC
                 if (!sync_send_security_change(ssid_index, ssid_ifname, &sec))
                 {
                     LOGW("%s: Failed to sync security change", ssid_ifname);
                 }
+#endif
             }
         }
     }
 
 
-    if (changed->enabled)
-    {
-        ret = wifi_setSSIDEnable(ssid_index, vconf->enabled);
-        LOGD("[WIFI_HAL SET] wifi_setSSIDEnable(%d, %d) = %d",
-                                 ssid_index, vconf->enabled, ret);
-        if (ret != RETURN_OK)
-        {
-            LOGW("%s: Failed to change enable to %d", ssid_ifname, vconf->enabled);
-        }
-    }
 
     if (changed->ap_bridge)
     {
